/* 
TEST 7 PARSER: 
Condicion, bucle y funcion
*/

/* Condicionales */

// Condicion simple
if (true) {
    a = 1;
}

// Condicion compuesta
if (true) {
    a = 1;
} else {
    a = 2;
}

// Condicion anidada
if (a == 0) {
    a = 1;
    if (a == 2) {
        a = 2;
        if (a < 3) {
            a = 3;
        } else {
            a = 4;
        }
    } else {
        a = 5;
    }
} else {
    a = 6;
}

/* Bucles */

// Bucle simple
let i = 0;
while(i < 10){
    i = i + 1;
}

// Bucle anidado
while(!(b == 0)){
    temp = b;
    b = mod(a,b);
    a = temp; 
    while(!y){
        a = 765;
        if (45. <= z){
            a = 'c';
        } else{
            ini = 'p';
        }
    }
}

// Bucle complejo
let x = 0;
type AJSON = { "variable1": int, variable2: int };
let obj: AJSON = { "variable1": 1, variable2: 2 };

while (x < 10) {
    let y = 0;
    while (y < 5) {
        let z = 0;
        while (z < 3) {
            if (z == 2) {
                x = x * 2;
                obj["variable1"] = obj["variable1"] + 1;
            } else {
                let w = 0;
                while (w < 2) {
                    if (w == 1) {
                        x = x + 3;
                        obj.variable2 = obj["variable2"] * 2;
                    } else {
                        x = x + 1;
                        obj["a"] = obj["a"] * 3;
                    }
                    w = w + 1;
                }
            }
            z = z + 1;
        }
        y = y + 1;
    }
}


/* Funciones */

// Función simple
function suma(a: int, b: int): int {
    let suma;
    suma = a + b;
    return suma;
}

// Función compleja
function fibonacci(n: int): int {
    let res;
    if (n == 0) {
        res = 0;
    } else {
        if (n == 1) {
            res = 1;
        } else {
            res = fibonacci(n - 1) + fibonacci(n - 2);
        }
    }
    return res;
}

// Función con bucle
function factorial(n: int): int {
    let result = 1;
    let i = 1;
    while (i <= n) {
        result = result * i;
        i = i + 1;
    }
    return result;
}

// Función con múltiples parámetros
function funcion2(obj: AJSON, a: int, b: character, end: boolean): int {
    let result;
    if (b == 's') {
        result = obj["variable1"] + obj.variable2 + a;
    } else {
        result = obj["variable1"] + obj.variable2 - a;
    }
    if (end) {
        result = 0;
    }
    return result;
}

// Función que retorne un objeto AJSON
type Point = { x: int, y: int };
function get_point_after_jumn(point: Point): Point {
    let sum = point.y + 10;
    return { x: point.x, y: sum };
}

